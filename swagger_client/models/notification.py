# coding: utf-8

"""
    Studio API

    Studio API  # noqa: E501

    OpenAPI spec version: 1.6.2 
    Contact: support@deepopinion.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'id': 'int',
        'read': 'datetime',
        'text': 'str',
        'title': 'str',
        'type': 'str'
    }

    attribute_map = {
        'created': 'created',
        'id': 'id',
        'read': 'read',
        'text': 'text',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, created=None, id=None, read=None, text=None, title=None, type=None, _configuration=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._id = None
        self._read = None
        self._text = None
        self._title = None
        self._type = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if id is not None:
            self.id = id
        if read is not None:
            self.read = read
        if text is not None:
            self.text = text
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type

    @property
    def created(self):
        """Gets the created of this Notification.  # noqa: E501

        creation date  # noqa: E501

        :return: The created of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Notification.

        creation date  # noqa: E501

        :param created: The created of this Notification.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def id(self):
        """Gets the id of this Notification.  # noqa: E501

        The ID of the notification.  # noqa: E501

        :return: The id of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Notification.

        The ID of the notification.  # noqa: E501

        :param id: The id of this Notification.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def read(self):
        """Gets the read of this Notification.  # noqa: E501

        date the user read the notification  # noqa: E501

        :return: The read of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Notification.

        date the user read the notification  # noqa: E501

        :param read: The read of this Notification.  # noqa: E501
        :type: datetime
        """

        self._read = read

    @property
    def text(self):
        """Gets the text of this Notification.  # noqa: E501

        The notification's text.  # noqa: E501

        :return: The text of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Notification.

        The notification's text.  # noqa: E501

        :param text: The text of this Notification.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def title(self):
        """Gets the title of this Notification.  # noqa: E501

        The notification's title.  # noqa: E501

        :return: The title of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Notification.

        The notification's title.  # noqa: E501

        :param title: The title of this Notification.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Notification.  # noqa: E501

        The notification's type.  # noqa: E501

        :return: The type of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Notification.

        The notification's type.  # noqa: E501

        :param type: The type of this Notification.  # noqa: E501
        :type: str
        """
        allowed_values = ["INFO", "WARNING"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Notification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Notification):
            return True

        return self.to_dict() != other.to_dict()
