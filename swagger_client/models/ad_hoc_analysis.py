# coding: utf-8

"""
    Studio API

    Studio API  # noqa: E501

    OpenAPI spec version: 1.6.2 
    Contact: support@deepopinion.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AdHocAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'documents': 'list[LabelledDocument]',
        'model': 'str',
        'type': 'str'
    }

    attribute_map = {
        'documents': 'documents',
        'model': 'model',
        'type': 'type'
    }

    def __init__(self, documents=None, model=None, type=None, _configuration=None):  # noqa: E501
        """AdHocAnalysis - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._documents = None
        self._model = None
        self._type = None
        self.discriminator = None

        if documents is not None:
            self.documents = documents
        if model is not None:
            self.model = model
        if type is not None:
            self.type = type

    @property
    def documents(self):
        """Gets the documents of this AdHocAnalysis.  # noqa: E501

        A list of labelled documents  # noqa: E501

        :return: The documents of this AdHocAnalysis.  # noqa: E501
        :rtype: list[LabelledDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this AdHocAnalysis.

        A list of labelled documents  # noqa: E501

        :param documents: The documents of this AdHocAnalysis.  # noqa: E501
        :type: list[LabelledDocument]
        """

        self._documents = documents

    @property
    def model(self):
        """Gets the model of this AdHocAnalysis.  # noqa: E501

        Name of the model used for the analysis  # noqa: E501

        :return: The model of this AdHocAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this AdHocAnalysis.

        Name of the model used for the analysis  # noqa: E501

        :param model: The model of this AdHocAnalysis.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def type(self):
        """Gets the type of this AdHocAnalysis.  # noqa: E501

        The analysis's classification type.  # noqa: E501

        :return: The type of this AdHocAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AdHocAnalysis.

        The analysis's classification type.  # noqa: E501

        :param type: The type of this AdHocAnalysis.  # noqa: E501
        :type: str
        """
        allowed_values = ["ABSA", "CLASS", "LABEL", "CLASSLABEL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdHocAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdHocAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdHocAnalysis):
            return True

        return self.to_dict() != other.to_dict()
