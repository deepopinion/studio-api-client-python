# coding: utf-8

"""
    Studio API

    Studio API  # noqa: E501

    OpenAPI spec version: 1.6.2 
    Contact: support@deepopinion.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Analysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'classes': 'list[ModelClass]',
        'created': 'datetime',
        'description': 'str',
        'document_count': 'int',
        'documents': 'list[LabelledDocument]',
        'finished': 'datetime',
        'id': 'int',
        'labels': 'list[Label]',
        'model_id': 'int',
        'name': 'str',
        'progress': 'float',
        'status': 'str',
        'type': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'classes': 'classes',
        'created': 'created',
        'description': 'description',
        'document_count': 'document_count',
        'documents': 'documents',
        'finished': 'finished',
        'id': 'id',
        'labels': 'labels',
        'model_id': 'model_id',
        'name': 'name',
        'progress': 'progress',
        'status': 'status',
        'type': 'type',
        'uuid': 'uuid'
    }

    def __init__(self, classes=None, created=None, description=None, document_count=None, documents=None, finished=None, id=None, labels=None, model_id=None, name=None, progress=None, status=None, type=None, uuid=None, _configuration=None):  # noqa: E501
        """Analysis - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._classes = None
        self._created = None
        self._description = None
        self._document_count = None
        self._documents = None
        self._finished = None
        self._id = None
        self._labels = None
        self._model_id = None
        self._name = None
        self._progress = None
        self._status = None
        self._type = None
        self._uuid = None
        self.discriminator = None

        if classes is not None:
            self.classes = classes
        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if document_count is not None:
            self.document_count = document_count
        if documents is not None:
            self.documents = documents
        if finished is not None:
            self.finished = finished
        if id is not None:
            self.id = id
        if labels is not None:
            self.labels = labels
        if model_id is not None:
            self.model_id = model_id
        if name is not None:
            self.name = name
        if progress is not None:
            self.progress = progress
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid

    @property
    def classes(self):
        """Gets the classes of this Analysis.  # noqa: E501

        All classes that belong to the session  # noqa: E501

        :return: The classes of this Analysis.  # noqa: E501
        :rtype: list[ModelClass]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this Analysis.

        All classes that belong to the session  # noqa: E501

        :param classes: The classes of this Analysis.  # noqa: E501
        :type: list[ModelClass]
        """

        self._classes = classes

    @property
    def created(self):
        """Gets the created of this Analysis.  # noqa: E501

        When the analysis was started.  # noqa: E501

        :return: The created of this Analysis.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Analysis.

        When the analysis was started.  # noqa: E501

        :param created: The created of this Analysis.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Analysis.  # noqa: E501

        The analysis's description.  # noqa: E501

        :return: The description of this Analysis.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Analysis.

        The analysis's description.  # noqa: E501

        :param description: The description of this Analysis.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def document_count(self):
        """Gets the document_count of this Analysis.  # noqa: E501

        Total of documents  # noqa: E501

        :return: The document_count of this Analysis.  # noqa: E501
        :rtype: int
        """
        return self._document_count

    @document_count.setter
    def document_count(self, document_count):
        """Sets the document_count of this Analysis.

        Total of documents  # noqa: E501

        :param document_count: The document_count of this Analysis.  # noqa: E501
        :type: int
        """

        self._document_count = document_count

    @property
    def documents(self):
        """Gets the documents of this Analysis.  # noqa: E501

        array of objects that represent documents.  # noqa: E501

        :return: The documents of this Analysis.  # noqa: E501
        :rtype: list[LabelledDocument]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Analysis.

        array of objects that represent documents.  # noqa: E501

        :param documents: The documents of this Analysis.  # noqa: E501
        :type: list[LabelledDocument]
        """

        self._documents = documents

    @property
    def finished(self):
        """Gets the finished of this Analysis.  # noqa: E501

        When the analysis was finished.  # noqa: E501

        :return: The finished of this Analysis.  # noqa: E501
        :rtype: datetime
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this Analysis.

        When the analysis was finished.  # noqa: E501

        :param finished: The finished of this Analysis.  # noqa: E501
        :type: datetime
        """

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this Analysis.  # noqa: E501

        The ID of the analysis.  # noqa: E501

        :return: The id of this Analysis.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Analysis.

        The ID of the analysis.  # noqa: E501

        :param id: The id of this Analysis.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Analysis.  # noqa: E501

        All labels that belong to the session  # noqa: E501

        :return: The labels of this Analysis.  # noqa: E501
        :rtype: list[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Analysis.

        All labels that belong to the session  # noqa: E501

        :param labels: The labels of this Analysis.  # noqa: E501
        :type: list[Label]
        """

        self._labels = labels

    @property
    def model_id(self):
        """Gets the model_id of this Analysis.  # noqa: E501

        The ID of the model used by that analysis.  # noqa: E501

        :return: The model_id of this Analysis.  # noqa: E501
        :rtype: int
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this Analysis.

        The ID of the model used by that analysis.  # noqa: E501

        :param model_id: The model_id of this Analysis.  # noqa: E501
        :type: int
        """

        self._model_id = model_id

    @property
    def name(self):
        """Gets the name of this Analysis.  # noqa: E501

        The analysis's name.  # noqa: E501

        :return: The name of this Analysis.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Analysis.

        The analysis's name.  # noqa: E501

        :param name: The name of this Analysis.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def progress(self):
        """Gets the progress of this Analysis.  # noqa: E501

        The analysis's progress.  # noqa: E501

        :return: The progress of this Analysis.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Analysis.

        The analysis's progress.  # noqa: E501

        :param progress: The progress of this Analysis.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this Analysis.  # noqa: E501

        The analysis's status.  # noqa: E501

        :return: The status of this Analysis.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Analysis.

        The analysis's status.  # noqa: E501

        :param status: The status of this Analysis.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATED", "QUEUED", "STARTED", "ANALYZING", "FAILED", "FINISHED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Analysis.  # noqa: E501

        The analysis's classification type.  # noqa: E501

        :return: The type of this Analysis.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Analysis.

        The analysis's classification type.  # noqa: E501

        :param type: The type of this Analysis.  # noqa: E501
        :type: str
        """
        allowed_values = ["ABSA", "CLASS", "LABEL", "CLASSLABEL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this Analysis.  # noqa: E501

        The unique ID of the analysis.  # noqa: E501

        :return: The uuid of this Analysis.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Analysis.

        The unique ID of the analysis.  # noqa: E501

        :param uuid: The uuid of this Analysis.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Analysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Analysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Analysis):
            return True

        return self.to_dict() != other.to_dict()
