# coding: utf-8

"""
    Studio API

    Studio API  # noqa: E501

    OpenAPI spec version: 1.6.2 
    Contact: support@deepopinion.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GetAnalyses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analyses': 'list[Analysis]',
        'count': 'int',
        'has_more': 'bool',
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'analyses': 'analyses',
        'count': 'count',
        'has_more': 'has_more',
        'limit': 'limit',
        'offset': 'offset'
    }

    def __init__(self, analyses=None, count=None, has_more=None, limit=None, offset=None, _configuration=None):  # noqa: E501
        """GetAnalyses - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._analyses = None
        self._count = None
        self._has_more = None
        self._limit = None
        self._offset = None
        self.discriminator = None

        if analyses is not None:
            self.analyses = analyses
        if count is not None:
            self.count = count
        if has_more is not None:
            self.has_more = has_more
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def analyses(self):
        """Gets the analyses of this GetAnalyses.  # noqa: E501

        array of objects that represent the analyses.  # noqa: E501

        :return: The analyses of this GetAnalyses.  # noqa: E501
        :rtype: list[Analysis]
        """
        return self._analyses

    @analyses.setter
    def analyses(self, analyses):
        """Sets the analyses of this GetAnalyses.

        array of objects that represent the analyses.  # noqa: E501

        :param analyses: The analyses of this GetAnalyses.  # noqa: E501
        :type: list[Analysis]
        """

        self._analyses = analyses

    @property
    def count(self):
        """Gets the count of this GetAnalyses.  # noqa: E501

        Number of objects returned  # noqa: E501

        :return: The count of this GetAnalyses.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GetAnalyses.

        Number of objects returned  # noqa: E501

        :param count: The count of this GetAnalyses.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def has_more(self):
        """Gets the has_more of this GetAnalyses.  # noqa: E501

        indicates if a new request with a different offset should be done to get more models.  # noqa: E501

        :return: The has_more of this GetAnalyses.  # noqa: E501
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this GetAnalyses.

        indicates if a new request with a different offset should be done to get more models.  # noqa: E501

        :param has_more: The has_more of this GetAnalyses.  # noqa: E501
        :type: bool
        """

        self._has_more = has_more

    @property
    def limit(self):
        """Gets the limit of this GetAnalyses.  # noqa: E501

        Limit of entries that should be returned.  # noqa: E501

        :return: The limit of this GetAnalyses.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetAnalyses.

        Limit of entries that should be returned.  # noqa: E501

        :param limit: The limit of this GetAnalyses.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this GetAnalyses.  # noqa: E501

        An offset is simply the number of records you wish to skip before selecting records.  # noqa: E501

        :return: The offset of this GetAnalyses.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetAnalyses.

        An offset is simply the number of records you wish to skip before selecting records.  # noqa: E501

        :param offset: The offset of this GetAnalyses.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAnalyses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAnalyses):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetAnalyses):
            return True

        return self.to_dict() != other.to_dict()
