# coding: utf-8

"""
    Studio API

    Studio API  # noqa: E501

    OpenAPI spec version: 1.6.2 
    Contact: support@deepopinion.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AnnotateCorrectionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'predicted_score': 'int',
        'progress': 'int',
        'segment': 'SegmentAnnotationStatus'
    }

    attribute_map = {
        'predicted_score': 'predicted_score',
        'progress': 'progress',
        'segment': 'segment'
    }

    def __init__(self, predicted_score=None, progress=None, segment=None, _configuration=None):  # noqa: E501
        """AnnotateCorrectionResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._predicted_score = None
        self._progress = None
        self._segment = None
        self.discriminator = None

        if predicted_score is not None:
            self.predicted_score = predicted_score
        if progress is not None:
            self.progress = progress
        if segment is not None:
            self.segment = segment

    @property
    def predicted_score(self):
        """Gets the predicted_score of this AnnotateCorrectionResponse.  # noqa: E501

        The projected new score  # noqa: E501

        :return: The predicted_score of this AnnotateCorrectionResponse.  # noqa: E501
        :rtype: int
        """
        return self._predicted_score

    @predicted_score.setter
    def predicted_score(self, predicted_score):
        """Sets the predicted_score of this AnnotateCorrectionResponse.

        The projected new score  # noqa: E501

        :param predicted_score: The predicted_score of this AnnotateCorrectionResponse.  # noqa: E501
        :type: int
        """

        self._predicted_score = predicted_score

    @property
    def progress(self):
        """Gets the progress of this AnnotateCorrectionResponse.  # noqa: E501

        The progress of the session  # noqa: E501

        :return: The progress of this AnnotateCorrectionResponse.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this AnnotateCorrectionResponse.

        The progress of the session  # noqa: E501

        :param progress: The progress of this AnnotateCorrectionResponse.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def segment(self):
        """Gets the segment of this AnnotateCorrectionResponse.  # noqa: E501


        :return: The segment of this AnnotateCorrectionResponse.  # noqa: E501
        :rtype: SegmentAnnotationStatus
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this AnnotateCorrectionResponse.


        :param segment: The segment of this AnnotateCorrectionResponse.  # noqa: E501
        :type: SegmentAnnotationStatus
        """

        self._segment = segment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotateCorrectionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotateCorrectionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnnotateCorrectionResponse):
            return True

        return self.to_dict() != other.to_dict()
