# coding: utf-8

"""
    Studio API

    Studio API  # noqa: E501

    OpenAPI spec version: 1.6.2 
    Contact: support@deepopinion.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ModelCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_id': 'int',
        'display_name': 'str',
        'language': 'str',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'base_id': 'base_id',
        'display_name': 'display_name',
        'language': 'language',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, base_id=None, display_name=None, language=None, name=None, type=None, _configuration=None):  # noqa: E501
        """ModelCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._base_id = None
        self._display_name = None
        self._language = None
        self._name = None
        self._type = None
        self.discriminator = None

        if base_id is not None:
            self.base_id = base_id
        if display_name is not None:
            self.display_name = display_name
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type

    @property
    def base_id(self):
        """Gets the base_id of this ModelCreate.  # noqa: E501

        Id of the Base Model used for training  # noqa: E501

        :return: The base_id of this ModelCreate.  # noqa: E501
        :rtype: int
        """
        return self._base_id

    @base_id.setter
    def base_id(self, base_id):
        """Sets the base_id of this ModelCreate.

        Id of the Base Model used for training  # noqa: E501

        :param base_id: The base_id of this ModelCreate.  # noqa: E501
        :type: int
        """

        self._base_id = base_id

    @property
    def display_name(self):
        """Gets the display_name of this ModelCreate.  # noqa: E501

        Display name of the model  # noqa: E501

        :return: The display_name of this ModelCreate.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ModelCreate.

        Display name of the model  # noqa: E501

        :param display_name: The display_name of this ModelCreate.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def language(self):
        """Gets the language of this ModelCreate.  # noqa: E501

        Language of the model  # noqa: E501

        :return: The language of this ModelCreate.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ModelCreate.

        Language of the model  # noqa: E501

        :param language: The language of this ModelCreate.  # noqa: E501
        :type: str
        """
        allowed_values = ["en", "de", "ar"]  # noqa: E501
        if (self._configuration.client_side_validation and
                language not in allowed_values):
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def name(self):
        """Gets the name of this ModelCreate.  # noqa: E501

        internal name. It should be unique for a workspace  # noqa: E501

        :return: The name of this ModelCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelCreate.

        internal name. It should be unique for a workspace  # noqa: E501

        :param name: The name of this ModelCreate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ModelCreate.  # noqa: E501

        Type of the model  # noqa: E501

        :return: The type of this ModelCreate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelCreate.

        Type of the model  # noqa: E501

        :param type: The type of this ModelCreate.  # noqa: E501
        :type: str
        """
        allowed_values = ["ABSA", "BASE", "LABEL", "CLASS", "CLASSLABEL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelCreate):
            return True

        return self.to_dict() != other.to_dict()
