# coding: utf-8

"""
    Studio API

    Studio API  # noqa: E501

    OpenAPI spec version: 1.6.2 
    Contact: support@deepopinion.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WorkspacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def organizations_organization_id_default_post(self, organization_id, body, **kwargs):  # noqa: E501
        """Set a workspace as the default one.  # noqa: E501

        <br/>Default workspaces will come pre-selected on Studio<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_default_post(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param SetDefaultBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_default_post_with_http_info(organization_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_default_post_with_http_info(organization_id, body, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_default_post_with_http_info(self, organization_id, body, **kwargs):  # noqa: E501
        """Set a workspace as the default one.  # noqa: E501

        <br/>Default workspaces will come pre-selected on Studio<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_default_post_with_http_info(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param SetDefaultBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_default_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_default_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `organizations_organization_id_default_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/default', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_delete(self, organization_id, **kwargs):  # noqa: E501
        """Deactivates a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_delete(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_delete_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_delete_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_delete_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Deactivates a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_delete_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_get(self, organization_id, **kwargs):  # noqa: E501
        """Get a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_get(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_get_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_get_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_get_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Get a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_get_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_invitation_invitation_id_delete(self, organization_id, invitation_id, **kwargs):  # noqa: E501
        """Cancel an invitation.  # noqa: E501

        <br/>The invitation will be removed and the link user received by email won't<br/>be valid anymore.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_invitation_invitation_id_delete(organization_id, invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param int invitation_id: ID of the invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_invitation_invitation_id_delete_with_http_info(organization_id, invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_invitation_invitation_id_delete_with_http_info(organization_id, invitation_id, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_invitation_invitation_id_delete_with_http_info(self, organization_id, invitation_id, **kwargs):  # noqa: E501
        """Cancel an invitation.  # noqa: E501

        <br/>The invitation will be removed and the link user received by email won't<br/>be valid anymore.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_invitation_invitation_id_delete_with_http_info(organization_id, invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param int invitation_id: ID of the invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'invitation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_invitation_invitation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_invitation_invitation_id_delete`")  # noqa: E501
        # verify the required parameter 'invitation_id' is set
        if self.api_client.client_side_validation and ('invitation_id' not in params or
                                                       params['invitation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `invitation_id` when calling `organizations_organization_id_invitation_invitation_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/invitation/{invitation_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_invitation_invitation_id_resend_post(self, organization_id, invitation_id, **kwargs):  # noqa: E501
        """Resend an invitation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_invitation_invitation_id_resend_post(organization_id, invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param int invitation_id: ID of the invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_invitation_invitation_id_resend_post_with_http_info(organization_id, invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_invitation_invitation_id_resend_post_with_http_info(organization_id, invitation_id, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_invitation_invitation_id_resend_post_with_http_info(self, organization_id, invitation_id, **kwargs):  # noqa: E501
        """Resend an invitation.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_invitation_invitation_id_resend_post_with_http_info(organization_id, invitation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param int invitation_id: ID of the invitation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'invitation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_invitation_invitation_id_resend_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_invitation_invitation_id_resend_post`")  # noqa: E501
        # verify the required parameter 'invitation_id' is set
        if self.api_client.client_side_validation and ('invitation_id' not in params or
                                                       params['invitation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `invitation_id` when calling `organizations_organization_id_invitation_invitation_id_resend_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/invitation/{invitation_id}/resend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_permissions_get(self, organization_id, **kwargs):  # noqa: E501
        """Get all users' permissions from a workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_permissions_get(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Permissions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_permissions_get_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_permissions_get_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_permissions_get_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Get all users' permissions from a workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_permissions_get_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Permissions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_permissions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_permissions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Permissions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_permissions_permission_id_delete(self, organization_id, permission_id, **kwargs):  # noqa: E501
        """Remove a user from a workspace.  # noqa: E501

        <br/>A workspace must have at least one manager<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_permissions_permission_id_delete(organization_id, permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param int permission_id: ID of the permission to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_permissions_permission_id_delete_with_http_info(organization_id, permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_permissions_permission_id_delete_with_http_info(organization_id, permission_id, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_permissions_permission_id_delete_with_http_info(self, organization_id, permission_id, **kwargs):  # noqa: E501
        """Remove a user from a workspace.  # noqa: E501

        <br/>A workspace must have at least one manager<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_permissions_permission_id_delete_with_http_info(organization_id, permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param int permission_id: ID of the permission to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'permission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_permissions_permission_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_permissions_permission_id_delete`")  # noqa: E501
        # verify the required parameter 'permission_id' is set
        if self.api_client.client_side_validation and ('permission_id' not in params or
                                                       params['permission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `permission_id` when calling `organizations_organization_id_permissions_permission_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501
        if 'permission_id' in params:
            path_params['permission_id'] = params['permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/permissions/{permission_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_permissions_permission_id_put(self, organization_id, permission_id, body, **kwargs):  # noqa: E501
        """Change user's role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_permissions_permission_id_put(organization_id, permission_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param int permission_id: ID of the permission to change (required)
        :param ChangePermissionBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_permissions_permission_id_put_with_http_info(organization_id, permission_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_permissions_permission_id_put_with_http_info(organization_id, permission_id, body, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_permissions_permission_id_put_with_http_info(self, organization_id, permission_id, body, **kwargs):  # noqa: E501
        """Change user's role.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_permissions_permission_id_put_with_http_info(organization_id, permission_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param int permission_id: ID of the permission to change (required)
        :param ChangePermissionBody body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'permission_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_permissions_permission_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_permissions_permission_id_put`")  # noqa: E501
        # verify the required parameter 'permission_id' is set
        if self.api_client.client_side_validation and ('permission_id' not in params or
                                                       params['permission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `permission_id` when calling `organizations_organization_id_permissions_permission_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `organizations_organization_id_permissions_permission_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501
        if 'permission_id' in params:
            path_params['permission_id'] = params['permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/permissions/{permission_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_permissions_post(self, organization_id, body, **kwargs):  # noqa: E501
        """Add a new user to a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_permissions_post(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param PermissionInput body: (required)
        :return: Permission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_permissions_post_with_http_info(organization_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_permissions_post_with_http_info(organization_id, body, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_permissions_post_with_http_info(self, organization_id, body, **kwargs):  # noqa: E501
        """Add a new user to a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_permissions_post_with_http_info(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param PermissionInput body: (required)
        :return: Permission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_permissions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_permissions_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `organizations_organization_id_permissions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Permission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_put(self, organization_id, body, **kwargs):  # noqa: E501
        """Change a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_put(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param CreateWorkspaceInput body: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_put_with_http_info(organization_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_put_with_http_info(organization_id, body, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_put_with_http_info(self, organization_id, body, **kwargs):  # noqa: E501
        """Change a workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_put_with_http_info(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param CreateWorkspaceInput body: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `organizations_organization_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_users_get(self, organization_id, **kwargs):  # noqa: E501
        """Get all users of a workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_users_get(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_users_get_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_users_get_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_users_get_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """Get all users of a workspace  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_users_get_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Users
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_users_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_users_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Users',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_users_invite_post(self, organization_id, body, **kwargs):  # noqa: E501
        """Invite users to a workspace.  # noqa: E501

        <br/>ALl invited users will have the same defined permission.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_users_invite_post(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param InviteUsersBody body: (required)
        :return: InviteUsersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_users_invite_post_with_http_info(organization_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_users_invite_post_with_http_info(organization_id, body, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_users_invite_post_with_http_info(self, organization_id, body, **kwargs):  # noqa: E501
        """Invite users to a workspace.  # noqa: E501

        <br/>ALl invited users will have the same defined permission.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_users_invite_post_with_http_info(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :param InviteUsersBody body: (required)
        :return: InviteUsersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_users_invite_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_users_invite_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `organizations_organization_id_users_invite_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/users/invite', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InviteUsersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_organization_id_users_invites_get(self, organization_id, **kwargs):  # noqa: E501
        """List all pending invitations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_users_invites_get(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Invitations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_organization_id_users_invites_get_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_organization_id_users_invites_get_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def organizations_organization_id_users_invites_get_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """List all pending invitations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_organization_id_users_invites_get_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int organization_id: ID of the workspace (required)
        :return: Invitations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_organization_id_users_invites_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if self.api_client.client_side_validation and ('organization_id' not in params or
                                                       params['organization_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `organization_id` when calling `organizations_organization_id_users_invites_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/users/invites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invitations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_post(self, body, **kwargs):  # noqa: E501
        """Create a new workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceInput body: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def organizations_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new workspace.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateWorkspaceInput body: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `organizations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organizations_users_invite_accept_post(self, body, **kwargs):  # noqa: E501
        """Accept an invitation.  # noqa: E501

        <br/>The data necessary to create a new user should be sent. If the user is<br/>already a member of Studio, only the membership will be added.<br/>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_users_invite_accept_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AcceptInvitationInput body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.organizations_users_invite_accept_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.organizations_users_invite_accept_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def organizations_users_invite_accept_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Accept an invitation.  # noqa: E501

        <br/>The data necessary to create a new user should be sent. If the user is<br/>already a member of Studio, only the membership will be added.<br/>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.organizations_users_invite_accept_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AcceptInvitationInput body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organizations_users_invite_accept_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `organizations_users_invite_accept_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/users/invite/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
