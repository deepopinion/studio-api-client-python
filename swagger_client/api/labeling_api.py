# coding: utf-8

"""
    Studio API

    Studio API  # noqa: E501

    OpenAPI spec version: 1.6.2 
    Contact: support@deepopinion.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LabelingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def projects_project_id_annotations_annotation_id_delete(self, project_id, annotation_id, **kwargs):  # noqa: E501
        """Delete a labeling session.  # noqa: E501

        <br/>This operation cannot be undone. The original document group will be preserved.<br/><br/>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_delete(project_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_delete_with_http_info(project_id, annotation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_delete_with_http_info(project_id, annotation_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_delete_with_http_info(self, project_id, annotation_id, **kwargs):  # noqa: E501
        """Delete a labeling session.  # noqa: E501

        <br/>This operation cannot be undone. The original document group will be preserved.<br/><br/>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_delete_with_http_info(project_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_delete`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_documents_document_id_get(self, project_id, annotation_id, document_id, **kwargs):  # noqa: E501
        """Get a particular document of a labeling session.  # noqa: E501

        <br/>Use URL params to control the result:<br/>- ?details=segments,meta,tags to show details of a document<br/> * segments: Show segments of a document<br/> * tags: Show tags of a document<br/> * meta: Show all the additional attributes that were originally given as the document was uploaded<br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_get(project_id, annotation_id, document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the session (required)
        :param int document_id: ID of the document (required)
        :param str details: Which documents' details API should return. Values might be any combination of 'segments', 'meta' and 'tags'.
        :return: LabelledDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_documents_document_id_get_with_http_info(project_id, annotation_id, document_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_documents_document_id_get_with_http_info(project_id, annotation_id, document_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_documents_document_id_get_with_http_info(self, project_id, annotation_id, document_id, **kwargs):  # noqa: E501
        """Get a particular document of a labeling session.  # noqa: E501

        <br/>Use URL params to control the result:<br/>- ?details=segments,meta,tags to show details of a document<br/> * segments: Show segments of a document<br/> * tags: Show tags of a document<br/> * meta: Show all the additional attributes that were originally given as the document was uploaded<br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_get_with_http_info(project_id, annotation_id, document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the session (required)
        :param int document_id: ID of the document (required)
        :param str details: Which documents' details API should return. Values might be any combination of 'segments', 'meta' and 'tags'.
        :return: LabelledDocument
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'document_id', 'details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_documents_document_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_get`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_get`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if self.api_client.client_side_validation and ('document_id' not in params or
                                                       params['document_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501
        if 'document_id' in params:
            path_params['document_id'] = params['document_id']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/documents/{document_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabelledDocument',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post(self, project_id, annotation_id, document_id, segment_id, body, **kwargs):  # noqa: E501
        """Mark a segment as annotated.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post(project_id, annotation_id, document_id, segment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :param Body3 body: (required)
        :return: SegmentAnnotationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post_with_http_info(project_id, annotation_id, document_id, segment_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post_with_http_info(project_id, annotation_id, document_id, segment_id, body, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post_with_http_info(self, project_id, annotation_id, document_id, segment_id, body, **kwargs):  # noqa: E501
        """Mark a segment as annotated.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post_with_http_info(project_id, annotation_id, document_id, segment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :param Body3 body: (required)
        :return: SegmentAnnotationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'document_id', 'segment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if self.api_client.client_side_validation and ('document_id' not in params or
                                                       params['document_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post`")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if self.api_client.client_side_validation and ('segment_id' not in params or
                                                       params['segment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `segment_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_statuses_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501
        if 'document_id' in params:
            path_params['document_id'] = params['document_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/documents/{document_id}/segments/{segment_id}/statuses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SegmentAnnotationStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get(self, project_id, annotation_id, document_id, segment_id, **kwargs):  # noqa: E501
        """Return a list of tags of a segment.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get(project_id, annotation_id, document_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :return: ClassLabelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get_with_http_info(project_id, annotation_id, document_id, segment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get_with_http_info(project_id, annotation_id, document_id, segment_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get_with_http_info(self, project_id, annotation_id, document_id, segment_id, **kwargs):  # noqa: E501
        """Return a list of tags of a segment.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get_with_http_info(project_id, annotation_id, document_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :return: ClassLabelTags
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'document_id', 'segment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if self.api_client.client_side_validation and ('document_id' not in params or
                                                       params['document_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get`")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if self.api_client.client_side_validation and ('segment_id' not in params or
                                                       params['segment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `segment_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501
        if 'document_id' in params:
            path_params['document_id'] = params['document_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/documents/{document_id}/segments/{segment_id}/tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassLabelTags',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post(self, project_id, annotation_id, document_id, segment_id, **kwargs):  # noqa: E501
        """Add a tag to a segment.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post(project_id, annotation_id, document_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :return: ClassLabelTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post_with_http_info(project_id, annotation_id, document_id, segment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post_with_http_info(project_id, annotation_id, document_id, segment_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post_with_http_info(self, project_id, annotation_id, document_id, segment_id, **kwargs):  # noqa: E501
        """Add a tag to a segment.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post_with_http_info(project_id, annotation_id, document_id, segment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :return: ClassLabelTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'document_id', 'segment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if self.api_client.client_side_validation and ('document_id' not in params or
                                                       params['document_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post`")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if self.api_client.client_side_validation and ('segment_id' not in params or
                                                       params['segment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `segment_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501
        if 'document_id' in params:
            path_params['document_id'] = params['document_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/documents/{document_id}/segments/{segment_id}/tags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassLabelTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete(self, project_id, annotation_id, document_id, segment_id, tag_id, **kwargs):  # noqa: E501
        """Delete a tag.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete(project_id, annotation_id, document_id, segment_id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :param int tag_id: ID of the tag (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete_with_http_info(project_id, annotation_id, document_id, segment_id, tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete_with_http_info(project_id, annotation_id, document_id, segment_id, tag_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete_with_http_info(self, project_id, annotation_id, document_id, segment_id, tag_id, **kwargs):  # noqa: E501
        """Delete a tag.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete_with_http_info(project_id, annotation_id, document_id, segment_id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :param int tag_id: ID of the tag (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'document_id', 'segment_id', 'tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if self.api_client.client_side_validation and ('document_id' not in params or
                                                       params['document_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete`")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if self.api_client.client_side_validation and ('segment_id' not in params or
                                                       params['segment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `segment_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete`")  # noqa: E501
        # verify the required parameter 'tag_id' is set
        if self.api_client.client_side_validation and ('tag_id' not in params or
                                                       params['tag_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501
        if 'document_id' in params:
            path_params['document_id'] = params['document_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501
        if 'tag_id' in params:
            path_params['tag_id'] = params['tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/documents/{document_id}/segments/{segment_id}/tags/{tag_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get(self, project_id, annotation_id, document_id, segment_id, tag_id, **kwargs):  # noqa: E501
        """Get a tag.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get(project_id, annotation_id, document_id, segment_id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :param int tag_id: ID of the tag (required)
        :return: ClassLabelTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get_with_http_info(project_id, annotation_id, document_id, segment_id, tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get_with_http_info(project_id, annotation_id, document_id, segment_id, tag_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get_with_http_info(self, project_id, annotation_id, document_id, segment_id, tag_id, **kwargs):  # noqa: E501
        """Get a tag.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get_with_http_info(project_id, annotation_id, document_id, segment_id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :param int tag_id: ID of the tag (required)
        :return: ClassLabelTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'document_id', 'segment_id', 'tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if self.api_client.client_side_validation and ('document_id' not in params or
                                                       params['document_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get`")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if self.api_client.client_side_validation and ('segment_id' not in params or
                                                       params['segment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `segment_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get`")  # noqa: E501
        # verify the required parameter 'tag_id' is set
        if self.api_client.client_side_validation and ('tag_id' not in params or
                                                       params['tag_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501
        if 'document_id' in params:
            path_params['document_id'] = params['document_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501
        if 'tag_id' in params:
            path_params['tag_id'] = params['tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/documents/{document_id}/segments/{segment_id}/tags/{tag_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassLabelTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put(self, body, project_id, annotation_id, document_id, segment_id, tag_id, **kwargs):  # noqa: E501
        """Change a tag.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put(body, project_id, annotation_id, document_id, segment_id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeAnnotationTag body: (required)
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :param int tag_id: ID of the tag (required)
        :return: ClassLabelTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put_with_http_info(body, project_id, annotation_id, document_id, segment_id, tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put_with_http_info(body, project_id, annotation_id, document_id, segment_id, tag_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put_with_http_info(self, body, project_id, annotation_id, document_id, segment_id, tag_id, **kwargs):  # noqa: E501
        """Change a tag.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put_with_http_info(body, project_id, annotation_id, document_id, segment_id, tag_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeAnnotationTag body: (required)
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param int segment_id: ID of the segment (required)
        :param int tag_id: ID of the tag (required)
        :return: ClassLabelTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'project_id', 'annotation_id', 'document_id', 'segment_id', 'tag_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if self.api_client.client_side_validation and ('document_id' not in params or
                                                       params['document_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put`")  # noqa: E501
        # verify the required parameter 'segment_id' is set
        if self.api_client.client_side_validation and ('segment_id' not in params or
                                                       params['segment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `segment_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put`")  # noqa: E501
        # verify the required parameter 'tag_id' is set
        if self.api_client.client_side_validation and ('tag_id' not in params or
                                                       params['tag_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tag_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_segments_segment_id_tags_tag_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501
        if 'document_id' in params:
            path_params['document_id'] = params['document_id']  # noqa: E501
        if 'segment_id' in params:
            path_params['segment_id'] = params['segment_id']  # noqa: E501
        if 'tag_id' in params:
            path_params['tag_id'] = params['tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/documents/{document_id}/segments/{segment_id}/tags/{tag_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClassLabelTag',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_documents_document_id_statuses_post(self, project_id, annotation_id, document_id, body, **kwargs):  # noqa: E501
        """Mark a document as annotated.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_statuses_post(project_id, annotation_id, document_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param Body4 body: (required)
        :return: DocumentAnnotationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_documents_document_id_statuses_post_with_http_info(project_id, annotation_id, document_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_documents_document_id_statuses_post_with_http_info(project_id, annotation_id, document_id, body, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_documents_document_id_statuses_post_with_http_info(self, project_id, annotation_id, document_id, body, **kwargs):  # noqa: E501
        """Mark a document as annotated.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_document_id_statuses_post_with_http_info(project_id, annotation_id, document_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :param int document_id: ID of the document (required)
        :param Body4 body: (required)
        :return: DocumentAnnotationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'document_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_documents_document_id_statuses_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_statuses_post`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_statuses_post`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if self.api_client.client_side_validation and ('document_id' not in params or
                                                       params['document_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `document_id` when calling `projects_project_id_annotations_annotation_id_documents_document_id_statuses_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `projects_project_id_annotations_annotation_id_documents_document_id_statuses_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501
        if 'document_id' in params:
            path_params['document_id'] = params['document_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/documents/{document_id}/statuses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DocumentAnnotationStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_documents_get(self, project_id, annotation_id, **kwargs):  # noqa: E501
        """Get all documents of a labeling session  # noqa: E501

        <br/>Use URL params to control or filter the result:<br/>- ?search=wordto only show documents that contain word<br/>- ?offset=0&limit=10 to have a paginated view<br/>- ?details=segments,meta,tags to show details of a document<br/> * segments: Show segments of a document<br/> * tags: Show tags of a document<br/> * meta: Show all the additional attributes that were originally given as the document was uploaded<br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_get(project_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the session (required)
        :param str details: Which details API should return. Values might be any combination of 'segments', 'meta' and 'tags'.
        :param int offset: An offset is simply the number of records you wish to skip before selecting records.
        :param int limit: Limit of entries that should be returned.
        :return: LabelingSessionWithDocs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_documents_get_with_http_info(project_id, annotation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_documents_get_with_http_info(project_id, annotation_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_documents_get_with_http_info(self, project_id, annotation_id, **kwargs):  # noqa: E501
        """Get all documents of a labeling session  # noqa: E501

        <br/>Use URL params to control or filter the result:<br/>- ?search=wordto only show documents that contain word<br/>- ?offset=0&limit=10 to have a paginated view<br/>- ?details=segments,meta,tags to show details of a document<br/> * segments: Show segments of a document<br/> * tags: Show tags of a document<br/> * meta: Show all the additional attributes that were originally given as the document was uploaded<br/><br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_documents_get_with_http_info(project_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the session (required)
        :param str details: Which details API should return. Values might be any combination of 'segments', 'meta' and 'tags'.
        :param int offset: An offset is simply the number of records you wish to skip before selecting records.
        :param int limit: Limit of entries that should be returned.
        :return: LabelingSessionWithDocs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'details', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_documents_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_documents_get`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabelingSessionWithDocs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_download_get(self, project_id, annotation_id, **kwargs):  # noqa: E501
        """Download a labeling session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_download_get(project_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the session (required)
        :param str format: File format. Possible values are csv, jsonl, json and xlsx
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_download_get_with_http_info(project_id, annotation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_download_get_with_http_info(project_id, annotation_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_download_get_with_http_info(self, project_id, annotation_id, **kwargs):  # noqa: E501
        """Download a labeling session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_download_get_with_http_info(project_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the session (required)
        :param str format: File format. Possible values are csv, jsonl, json and xlsx
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_download_get`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_get(self, project_id, annotation_id, **kwargs):  # noqa: E501
        """Return a labeling session.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_get(project_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :return: LabelingSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_get_with_http_info(project_id, annotation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_get_with_http_info(project_id, annotation_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_get_with_http_info(self, project_id, annotation_id, **kwargs):  # noqa: E501
        """Return a labeling session.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_get_with_http_info(project_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session (required)
        :return: LabelingSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_get`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabelingSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_annotation_id_put(self, project_id, annotation_id, body, **kwargs):  # noqa: E501
        """Change a labeling session.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_put(project_id, annotation_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session to changed (required)
        :param LabelingSessionChange body: (required)
        :return: LabelingSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_annotation_id_put_with_http_info(project_id, annotation_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_annotation_id_put_with_http_info(project_id, annotation_id, body, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_annotation_id_put_with_http_info(self, project_id, annotation_id, body, **kwargs):  # noqa: E501
        """Change a labeling session.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_annotation_id_put_with_http_info(project_id, annotation_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int annotation_id: ID of the labeling session to changed (required)
        :param LabelingSessionChange body: (required)
        :return: LabelingSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'annotation_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_annotation_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_annotation_id_put`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if self.api_client.client_side_validation and ('annotation_id' not in params or
                                                       params['annotation_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `annotation_id` when calling `projects_project_id_annotations_annotation_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `projects_project_id_annotations_annotation_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotation_id'] = params['annotation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/{annotation_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabelingSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_download_get(self, project_id, **kwargs):  # noqa: E501
        """Download all labeling sessions of a project.  # noqa: E501

        <br/>The result will be combined into one single file.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_download_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str format: File format. Possible values are csv, jsonl, json and xlsx
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_download_get_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_download_get_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_download_get_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Download all labeling sessions of a project.  # noqa: E501

        <br/>The result will be combined into one single file.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_download_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str format: File format. Possible values are csv, jsonl, json and xlsx
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_get(self, project_id, **kwargs):  # noqa: E501
        """Return a list of labeling sessions that belongs to a project.  # noqa: E501

        <br/>You can combine any of the parameters to filter the results.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_get(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str mode: Labeling mode. Any combination of ANNOTATION or CORRECTION
        :param str status: Labeling status. Any of CREATED, STARTED, ANNOTATING, FAILED, FINISHED, SAMPLING, PREDICTING or DELETING
        :return: LabelingSessions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_get_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_get_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_get_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Return a list of labeling sessions that belongs to a project.  # noqa: E501

        <br/>You can combine any of the parameters to filter the results.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_get_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str mode: Labeling mode. Any combination of ANNOTATION or CORRECTION
        :param str status: Labeling status. Any of CREATED, STARTED, ANNOTATING, FAILED, FINISHED, SAMPLING, PREDICTING or DELETING
        :return: LabelingSessions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'mode', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabelingSessions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_post(self, project_id, body, **kwargs):  # noqa: E501
        """Create a new labeling session.  # noqa: E501

        <br/>If neither documents nor document_ids are given, the whole documents of the system are used for this annotation.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_post(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param LabelingSessionCreate body: (required)
        :return: LabelingSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_post_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_post_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_post_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Create a new labeling session.  # noqa: E501

        <br/>If neither documents nor document_ids are given, the whole documents of the system are used for this annotation.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_post_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param LabelingSessionCreate body: (required)
        :return: LabelingSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_post`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `projects_project_id_annotations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabelingSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_project_id_annotations_upload_post(self, project_id, file, **kwargs):  # noqa: E501
        """Upload a file for a new labeling session.  # noqa: E501

        <br/>A file contains one or more documents that can be used to create a labeling session.<br/><br/>If show_preview is True, a preview will be shown and the endpoint to create<br/>a new labeling session must be called using the \"id\" and a column name<br/>obtained in the preview response.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_upload_post(project_id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param file file: file to upload (required)
        :param bool show_preview: If true, a preview will be shown.
        :return: LabelingSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.projects_project_id_annotations_upload_post_with_http_info(project_id, file, **kwargs)  # noqa: E501
        else:
            (data) = self.projects_project_id_annotations_upload_post_with_http_info(project_id, file, **kwargs)  # noqa: E501
            return data

    def projects_project_id_annotations_upload_post_with_http_info(self, project_id, file, **kwargs):  # noqa: E501
        """Upload a file for a new labeling session.  # noqa: E501

        <br/>A file contains one or more documents that can be used to create a labeling session.<br/><br/>If show_preview is True, a preview will be shown and the endpoint to create<br/>a new labeling session must be called using the \"id\" and a column name<br/>obtained in the preview response.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_project_id_annotations_upload_post_with_http_info(project_id, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param file file: file to upload (required)
        :param bool show_preview: If true, a preview will be shown.
        :return: LabelingSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'file', 'show_preview']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_project_id_annotations_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `projects_project_id_annotations_upload_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `projects_project_id_annotations_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['project_id'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'show_preview' in params:
            form_params.append(('show_preview', params['show_preview']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/projects/{project_id}/annotations/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabelingSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
