# coding: utf-8

"""
    Studio API

    Studio API  # noqa: E501

    OpenAPI spec version: 1.6.2 
    Contact: support@deepopinion.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AnalysesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def analyses_analysis_id_delete(self, analysis_id, **kwargs):  # noqa: E501
        """Delete an analyses.  # noqa: E501

        <br/>This operation cannot be undone. The original document group will be preserved.<br/><br/>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_delete(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyses_analysis_id_delete_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.analyses_analysis_id_delete_with_http_info(analysis_id, **kwargs)  # noqa: E501
            return data

    def analyses_analysis_id_delete_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Delete an analyses.  # noqa: E501

        <br/>This operation cannot be undone. The original document group will be preserved.<br/><br/>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_delete_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyses_analysis_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if self.api_client.client_side_validation and ('analysis_id' not in params or
                                                       params['analysis_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `analysis_id` when calling `analyses_analysis_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analyses_analysis_id_documents_download_get(self, analysis_id, **kwargs):  # noqa: E501
        """Download analysis's documents.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_documents_download_get(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis_id to get (required)
        :param str format: File format. Possible values are csv, jsonl, json and xlsx
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyses_analysis_id_documents_download_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.analyses_analysis_id_documents_download_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
            return data

    def analyses_analysis_id_documents_download_get_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Download analysis's documents.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_documents_download_get_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis_id to get (required)
        :param str format: File format. Possible values are csv, jsonl, json and xlsx
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyses_analysis_id_documents_download_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if self.api_client.client_side_validation and ('analysis_id' not in params or
                                                       params['analysis_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `analysis_id` when calling `analyses_analysis_id_documents_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}/documents/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analyses_analysis_id_documents_get(self, analysis_id, **kwargs):  # noqa: E501
        """Fetches all documents of a given analysis  # noqa: E501

        <br/>Use URL params to control or filter the result:<br/>- ?search=wordto only show documents that contain word<br/>- ?offset=0&limit=10 to have a paginated view<br/>- ?classes=1,746 to filter by these class ids<br/>- ?labels=110,111,112 to filter by these class ids<br/>- ?details=segments,meta,tags to show details of a document<br/>     * segments: Show segments of a document<br/>     * tags: Show tags of a document<br/>     * meta: Show all the additional attributes that were originally given as the document was uploaded<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_documents_get(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis to get (required)
        :param str details: Which details API should return. Values might be any combination of 'segments', 'meta', 'tags' and 'stats'.
        :param str search: Search by name
        :param int offset: An offset is simply the number of records you wish to skip before selecting records.
        :param int limit: Limit of entries that should be returned.
        :return: LabelledDocumentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyses_analysis_id_documents_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.analyses_analysis_id_documents_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
            return data

    def analyses_analysis_id_documents_get_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Fetches all documents of a given analysis  # noqa: E501

        <br/>Use URL params to control or filter the result:<br/>- ?search=wordto only show documents that contain word<br/>- ?offset=0&limit=10 to have a paginated view<br/>- ?classes=1,746 to filter by these class ids<br/>- ?labels=110,111,112 to filter by these class ids<br/>- ?details=segments,meta,tags to show details of a document<br/>     * segments: Show segments of a document<br/>     * tags: Show tags of a document<br/>     * meta: Show all the additional attributes that were originally given as the document was uploaded<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_documents_get_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis to get (required)
        :param str details: Which details API should return. Values might be any combination of 'segments', 'meta', 'tags' and 'stats'.
        :param str search: Search by name
        :param int offset: An offset is simply the number of records you wish to skip before selecting records.
        :param int limit: Limit of entries that should be returned.
        :return: LabelledDocumentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id', 'details', 'search', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyses_analysis_id_documents_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if self.api_client.client_side_validation and ('analysis_id' not in params or
                                                       params['analysis_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `analysis_id` when calling `analyses_analysis_id_documents_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LabelledDocumentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analyses_analysis_id_get(self, analysis_id, **kwargs):  # noqa: E501
        """Get an Analysis  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_get(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis_id to get (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyses_analysis_id_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.analyses_analysis_id_get_with_http_info(analysis_id, **kwargs)  # noqa: E501
            return data

    def analyses_analysis_id_get_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Get an Analysis  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_get_with_http_info(analysis_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis_id to get (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyses_analysis_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if self.api_client.client_side_validation and ('analysis_id' not in params or
                                                       params['analysis_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `analysis_id` when calling `analyses_analysis_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Analysis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analyses_analysis_id_put(self, analysis_id, body, **kwargs):  # noqa: E501
        """Change analysis's name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_put(analysis_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis to change (required)
        :param Body body: (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyses_analysis_id_put_with_http_info(analysis_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.analyses_analysis_id_put_with_http_info(analysis_id, body, **kwargs)  # noqa: E501
            return data

    def analyses_analysis_id_put_with_http_info(self, analysis_id, body, **kwargs):  # noqa: E501
        """Change analysis's name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_analysis_id_put_with_http_info(analysis_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int analysis_id: ID of the analysis to change (required)
        :param Body body: (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['analysis_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyses_analysis_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if self.api_client.client_side_validation and ('analysis_id' not in params or
                                                       params['analysis_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `analysis_id` when calling `analyses_analysis_id_put`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `analyses_analysis_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['analysis_id'] = params['analysis_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{analysis_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Analysis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analyses_get(self, **kwargs):  # noqa: E501
        """Return a list of analyses.  # noqa: E501

        <br/>Lists all available analyses for a user. You can combine any of the parameters to filter the result<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model: ID of the model
        :param int offset: An offset is simply the number of records you wish to skip before selecting records.
        :param int limit: Limit of entries that should be returned.
        :return: Analyses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyses_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.analyses_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def analyses_get_with_http_info(self, **kwargs):  # noqa: E501
        """Return a list of analyses.  # noqa: E501

        <br/>Lists all available analyses for a user. You can combine any of the parameters to filter the result<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model: ID of the model
        :param int offset: An offset is simply the number of records you wish to skip before selecting records.
        :param int limit: Limit of entries that should be returned.
        :return: Analyses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyses_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Analyses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analyses_post(self, body, **kwargs):  # noqa: E501
        """Create a new analysis.  # noqa: E501

        <br/>There are two ways of creating an analysis:<br/>- By calling the Create analysis endpoint with all the documents you want to analyze<br/>- In two steps: first one, upload a file in CSV, JSON, JSONL or XLSX format using the Upload a File endpoint. Then, use the file_id received and the column you want<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnalysisCreate body: (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyses_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.analyses_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def analyses_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a new analysis.  # noqa: E501

        <br/>There are two ways of creating an analysis:<br/>- By calling the Create analysis endpoint with all the documents you want to analyze<br/>- In two steps: first one, upload a file in CSV, JSON, JSONL or XLSX format using the Upload a File endpoint. Then, use the file_id received and the column you want<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AnalysisCreate body: (required)
        :return: Analysis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyses_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `analyses_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Analysis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analyses_upload_post(self, file, **kwargs):  # noqa: E501
        """Upload a file for a new batch analysis.  # noqa: E501

        <br/>A file contains one or more documents that can be used to create a batch<br/>analysis.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_upload_post(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: file to upload (required)
        :return: FilePreview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyses_upload_post_with_http_info(file, **kwargs)  # noqa: E501
        else:
            (data) = self.analyses_upload_post_with_http_info(file, **kwargs)  # noqa: E501
            return data

    def analyses_upload_post_with_http_info(self, file, **kwargs):  # noqa: E501
        """Upload a file for a new batch analysis.  # noqa: E501

        <br/>A file contains one or more documents that can be used to create a batch<br/>analysis.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyses_upload_post_with_http_info(file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file file: file to upload (required)
        :return: FilePreview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyses_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `analyses_upload_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilePreview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def analyze_post(self, body, **kwargs):  # noqa: E501
        """Ad-hoc analysis of a list of documents.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyze_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdHocAnalysisCreate body: (required)
        :return: AdHocAnalysis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.analyze_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.analyze_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def analyze_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Ad-hoc analysis of a list of documents.  # noqa: E501

        <br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.analyze_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdHocAnalysisCreate body: (required)
        :return: AdHocAnalysis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method analyze_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `analyze_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/analyze', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdHocAnalysis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
